import * as ko from "knockout";
import "ojs/ojknockout";
import ArrayDataProvider = require("ojs/ojarraydataprovider");
import "ojs/ojlistview";
import "ojs/ojlistitemlayout";
import "ojs/ojbutton";
import "ojs/ojlabel";
import "ojs/ojdialog";
import "ojs/ojinputsearch";
import "ojs/ojinputtext";
import "ojs/ojavatar";
import 'oj-c/checkbox';
import "ojs/ojavatar";
import { ObservableKeySet } from 'ojs/ojknockout-keyset';
import { MemberData, GroupData, ApplicationOption } from "./userManagement/types";
import { getRelativeTime } from "./userManagement/userManagementUtils";
import "ojs/ojmodule";
import "ojs/ojmodule-element";
import "ojs/ojmodule-element-utils";
declare class UserManagementViewModel {
    groupDataArray: ko.ObservableArray<GroupData>;
    dataProvider: any;
    isDataEmpty: ko.PureComputed<boolean>;
    searchTerm: ko.Observable<string>;
    currentPage: ko.Observable<number>;
    totalPages: ko.PureComputed<number>;
    goToNextPage: () => void;
    goToPrevPage: () => void;
    newGroupName: ko.Observable<string>;
    searchValue: ko.Observable<string>;
    searchRawValue: ko.Observable<string>;
    createDialogAvailableMembers: ko.ObservableArray<MemberData>;
    createDialogSelectedMembers: ko.ObservableArray<MemberData>;
    createDialogApplications: ko.ObservableArray<ApplicationOption>;
    isCreating: ko.Observable<boolean>;
    createError: ko.Observable<string>;
    openAddGroupDialog: () => Promise<void>;
    closeAddGroupDialog: () => void;
    handleMemberSearchInput: (event: CustomEvent<any>) => void;
    addSelectedMembersToGroup: () => void;
    removeSelectedMembersFromGroup: () => void;
    removeAllSelectedMembers: () => void;
    createGroup: () => Promise<void>;
    addMemberToSelected: (member: MemberData) => void;
    removeMemberFromSelected: (member: MemberData) => void;
    removeAllMembersAdd: () => void;
    selectedGroupName: ko.Observable<string>;
    currentMembers: ko.ObservableArray<MemberData>;
    editDialogAvailableMembers: ko.ObservableArray<MemberData>;
    selectedAvailableMemberKeys: ko.Observable<ObservableKeySet<string | number>>;
    selectedAssignedMemberKeys: ko.Observable<ObservableKeySet<string | number>>;
    editSearchValue: ko.Observable<string>;
    editSearchRawValue: ko.Observable<string>;
    editError: ko.Observable<string>;
    editDialogApplications: ko.ObservableArray<ApplicationOption>;
    handleAvailableMemberSelection: (member: MemberData) => void;
    handleUnselectMember: (member: MemberData) => void;
    handleEditMemberSearchInput: (event: CustomEvent<any>) => void;
    openEditGroupDialog: (event: {
        detail: {
            groupId: string;
            groupName: string;
        };
    }) => Promise<void>;
    closeEditDialog: () => void;
    updateGroup: () => Promise<void>;
    removeAllMembersEdit: () => void;
    selectedGroupIsAdmin: boolean;
    getInitials: (name: string) => string;
    getRelativeTime: typeof getRelativeTime;
    createDialogAvailableMembersDP: ArrayDataProvider<unknown, unknown>;
    createDialogSelectedMembersDP: ArrayDataProvider<unknown, unknown>;
    currentMembersDP: ko.PureComputed<ArrayDataProvider<unknown, unknown>>;
    editDialogAvailableMembersDP: ArrayDataProvider<unknown, unknown>;
    deleteGroupDialog: {
        groupId: ko.Observable<string>;
        groupName: ko.Observable<string>;
        isDeleting: ko.Observable<boolean>;
        openDialog(groupId: string, groupName: string): void;
        closeDialog(): void;
        confirmDelete(): Promise<void>;
    };
    is_admin: ko.Observable<boolean>;
    private authService;
    constructor();
    editGroup: (group: {
        groupId: string;
        groupName: string;
    }) => void;
    deleteGroup: (event: CustomEvent) => void;
    connected(): void;
    disconnected(): void;
    transitionCompleted(): void;
    onSearchInputChange: (event: CustomEvent) => void;
}
export = UserManagementViewModel;

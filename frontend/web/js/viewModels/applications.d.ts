import * as ko from "knockout";
import "ojs/ojknockout";
import ArrayDataProvider = require("ojs/ojarraydataprovider");
import "ojs/ojlistview";
import "ojs/ojlistitemlayout";
import "ojs/ojbutton";
import "ojs/ojlabel";
import "ojs/ojdialog";
import "ojs/ojinputsearch";
import "ojs/ojformlayout";
import "ojs/ojavatar";
import "oj-c/input-text";
import "oj-c/text-area";
import "oj-c/select-single";
import 'oj-c/checkbox';
import 'ojs/ojswitch';
import { ApplicationData } from './applicationManagement/types';
import { getRelativeTime } from './applicationManagement/applicationUtils';
declare class ApplicationViewModel {
    readonly applicationDataArray: ko.ObservableArray<ApplicationData>;
    readonly searchQuery: ko.Observable<string>;
    readonly currentPage: ko.Observable<number>;
    readonly pageSize: number;
    sortOption: ko.Observable<"nameAsc" | "nameDesc" | "createdAtAsc" | "createdAtDesc" | "updatedAtAsc" | "updatedAtDesc">;
    statusFilter: ko.Observable<"all" | "active" | "inactive">;
    environmentFilter: ko.Observable<"all" | "Development" | "Testing" | "Production" | "Staging">;
    newApplication: {
        name: ko.Observable<string>;
        hostname: ko.Observable<string>;
        environment: ko.Observable<string | null>;
        description: ko.Observable<string>;
        isActive: ko.Observable<boolean>;
    };
    envOptions: ArrayDataProvider<unknown, unknown>;
    selectedApplicationId: ko.Observable<string>;
    selectedApplicationName: ko.Observable<string>;
    selectedApplicationHostName: ko.Observable<string>;
    selectedApplicationEnv: ko.Observable<string>;
    selectedApplicationDescription: ko.Observable<string>;
    selectedApplicationIsActive: ko.Observable<boolean>;
    availableGroups: ko.ObservableArray<import("./applicationManagement/addAppDialog").GroupOption>;
    availableGroupsEdit: ko.ObservableArray<import("./applicationManagement/editAppDialog").GroupOption>;
    sortOptions: ArrayDataProvider<unknown, unknown>;
    isAdmin: ko.Observable<boolean>;
    statusFilterOptions: ArrayDataProvider<unknown, unknown>;
    environmentFilterOptions: ArrayDataProvider<unknown, unknown>;
    private authService;
    addAppDialogError: ko.Observable<string>;
    editAppDialogError: ko.Observable<string>;
    readonly totalPages: ko.PureComputed<number>;
    readonly paginatedApplications: ko.PureComputed<ApplicationData[]>;
    readonly paginatedDataProvider: ko.PureComputed<ArrayDataProvider<unknown, unknown>>;
    readonly isDataEmpty: ko.PureComputed<boolean>;
    readonly loadApplicationData: () => Promise<void>;
    openAddDialog: () => Promise<void>;
    closeAddDialog: () => void;
    addNewApplication: () => Promise<void>;
    resetNewAppForm: () => void;
    editApplication: (event: any) => void;
    gotoEditApplication: (event: any) => void;
    openEditDialog: (appId: string) => Promise<void>;
    closeEditDialog: () => void;
    updateApplication: () => Promise<void>;
    getRelativeTime: typeof getRelativeTime;
    handleDeleteApp: (event: any) => void;
    cancelDelete: () => void;
    confirmDelete: () => Promise<void>;
    isDeleting: ko.Observable<boolean>;
    applicationName: ko.Observable<string>;
    constructor();
    connected(): Promise<void>;
    disconnected(): void;
    transitionCompleted(): void;
}
export = ApplicationViewModel;
